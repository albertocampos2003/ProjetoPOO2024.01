package poojogo;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

class Elemento {
    // Classe base para elementos da floresta
}

class ElementoEstatico extends Elemento {
    private String tipo;

    public ElementoEstatico(String tipo) {
        this.tipo = tipo;
    }

    public String getRepresentacao() {
        switch (tipo) {
            case "arvore":
                return "üå≥";
            case "pedra":
                return "ü™®";
            default:
                return " ";
        }
    }
}

class Fruta extends Elemento {
    private String tipo;

    public Fruta(String tipo) {
        this.tipo = tipo;
    }

    public String getRepresentacao() {
        switch (tipo) {
            case "maracuja":
                return "üçà";
            case "coco":
                return "ü••";
            default:
                return "üçè";
        }
    }
}

class Floresta {
    private Elemento[][] grid;
    private int tamanho;

    public Floresta(int tamanho, int numPedras) {
        this.tamanho = tamanho;
        this.grid = new Elemento[tamanho][tamanho];
        inicializarTerreno(numPedras);
    }

    private void inicializarTerreno(int numPedras) {
        Random rand = new Random();
        int pedrasColocadas = 0;

        for (int i = 0; i < tamanho; i++) {
            for (int j = 0; j < tamanho; j++) {
                if (pedrasColocadas < numPedras && rand.nextInt(tamanho * tamanho) < 2) {
                    grid[i][j] = new ElementoEstatico("pedra");
                    pedrasColocadas++;
                } else if (rand.nextInt(10) < 5) {
                    grid[i][j] = new ElementoEstatico("arvore");
                } else {
                    grid[i][j] = new Fruta("coco");
                }
            }
        }
    }

    public Elemento[][] getGrid() {
        return grid;
    }

    public int getTamanho() {
        return tamanho;
    }
}

public class pooteste1 extends JFrame {
    private JPanel panelConfig;
    private JPanel panelGame;
    private JTextField txtDimension;
    private JTextField txtPedras;
    private JTextField txtNomeTerreno;
    private JButton btnSalvar;
    private JButton btnIniciar;
    private JButton btnAdicionarCompetidor;
    private JButton btnCarregarTerreno;
    private JButton btnAbrirTerreno;
    private Floresta floresta;
    private List<Competidor> competidores = new ArrayList<>();
    private JTextField txtNomeCompetidor;
    private JComboBox<String> cbCores;
    private DrawPanel drawPanel;

    public pooteste1() {
        setTitle("Jogo da Floresta");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(800, 600);
        getContentPane().setLayout(new BorderLayout());

        // Painel de Configura√ß√£o
        panelConfig = new JPanel();
        panelConfig.setLayout(new GridLayout(8, 2));

        panelConfig.add(new JLabel("Dimens√£o (m >= 3):"));
        txtDimension = new JTextField();
        panelConfig.add(txtDimension);

        panelConfig.add(new JLabel("N√∫mero de Pedras:"));
        txtPedras = new JTextField();
        panelConfig.add(txtPedras);

        // Nome do terreno
        panelConfig.add(new JLabel("Nome do Terreno:"));
        txtNomeTerreno = new JTextField();
        panelConfig.add(txtNomeTerreno);

        // Adicionar competidor
        panelConfig.add(new JLabel("Nome do Competidor:"));
        txtNomeCompetidor = new JTextField();
        panelConfig.add(txtNomeCompetidor);

        panelConfig.add(new JLabel("Cor do Competidor:"));
        cbCores = new JComboBox<>(new String[]{"Vermelho", "Verde", "Azul", "Amarelo"});
        panelConfig.add(cbCores);

        btnAdicionarCompetidor = new JButton("ADICIONAR COMPETIDOR");
        panelConfig.add(btnAdicionarCompetidor);

        btnSalvar = new JButton("SALVAR TERRENO");
        btnSalvar.setForeground(new Color(0, 0, 0));
        btnSalvar.setBackground(new Color(0, 128, 192));
        panelConfig.add(btnSalvar);

        btnIniciar = new JButton("INICIAR JOGO");
        btnIniciar.setForeground(new Color(0, 0, 64));
        btnIniciar.setBackground(new Color(0, 128, 192));
        panelConfig.add(btnIniciar);

        // Bot√£o para abrir o terreno salvo
        btnAbrirTerreno = new JButton("ABRIR TERRENO");
        panelConfig.add(btnAbrirTerreno);

        // √Årea de Jogo
        drawPanel = new DrawPanel();
        panelGame = new JPanel();
        panelGame.setLayout(new BorderLayout());
        panelGame.add(drawPanel, BorderLayout.CENTER);

        // Adicionando os Pain√©is
        getContentPane().add(panelConfig, BorderLayout.WEST);
        getContentPane().add(panelGame, BorderLayout.CENTER);

        // A√ß√µes dos Bot√µes
        btnSalvar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                salvarTerreno();
            }
        });

        btnIniciar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                iniciarJogo();
            }
        });

        btnAbrirTerreno.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                abrirTerreno();
            }
        });

        btnAdicionarCompetidor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                adicionarCompetidor();
            }
        });
    }

    private void salvarTerreno() {
        String dimension = txtDimension.getText();
        String pedras = txtPedras.getText();
        String nomeTerreno = txtNomeTerreno.getText().trim();

        if (nomeTerreno.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, insira um nome para o terreno.");
            return;
        }

        try (PrintWriter writer = new PrintWriter(new FileWriter(nomeTerreno + ".txt"))) {
            writer.println("dimensao " + dimension);
            writer.println("pedras " + pedras);
            JOptionPane.showMessageDialog(this, "Terreno salvo como: " + nomeTerreno + ".txt");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao salvar o terreno: " + ex.getMessage());
        }
    }

    private void iniciarJogo() {
        try {
            int dimension = Integer.parseInt(txtDimension.getText());
            int numPedras = Integer.parseInt(txtPedras.getText());

            if (dimension < 3) {
                JOptionPane.showMessageDialog(this, "A dimens√£o m√≠nima √© 3.");
                return;
            }

            if (numPedras > dimension * dimension) {
                JOptionPane.showMessageDialog(this, "N√∫mero de pedras n√£o pode ser maior que o n√∫mero de c√©lulas.");
                return;
            }

            floresta = new Floresta(dimension, numPedras);
            drawPanel.repaint(); // Atualiza o painel
            JOptionPane.showMessageDialog(this, "Jogo Iniciado!");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, insira valores v√°lidos.");
        }
    }

    private void abrirTerreno() {
        File dir = new File(".");
        File[] arquivos = dir.listFiles((d, name) -> name.endsWith(".txt"));

        if (arquivos == null || arquivos.length == 0) {
            JOptionPane.showMessageDialog(this, "Nenhum terreno salvo encontrado.");
            return;
        }

        String[] opcoesTerrenos = new String[arquivos.length];
        for (int i = 0; i < arquivos.length; i++) {
            opcoesTerrenos[i] = arquivos[i].getName();
        }

        String terrenoSelecionado = (String) JOptionPane.showInputDialog(this, "Selecione um terreno", 
            "Abrir Terreno", JOptionPane.PLAIN_MESSAGE, null, opcoesTerrenos, opcoesTerrenos[0]);

        if (terrenoSelecionado != null) {
            carregarTerreno(terrenoSelecionado);
        }
    }

    private void carregarTerreno(String nomeArquivo) {
        try (BufferedReader reader = new BufferedReader(new FileReader(nomeArquivo))) {
            String linha;
            while ((linha = reader.readLine()) != null) {
                if (linha.startsWith("dimensao")) {
                    txtDimension.setText(linha.split(" ")[1]);
                } else if (linha.startsWith("pedras")) {
                    txtPedras.setText(linha.split(" ")[1]);
                }
            }
            JOptionPane.showMessageDialog(this, "Terreno " + nomeArquivo + " carregado!");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar o terreno: " + ex.getMessage());
        }
    }

    private void adicionarCompetidor() {
        String nome = txtNomeCompetidor.getText();
        Color cor = Color.RED;

        // Definindo a cor do competidor
        switch (cbCores.getSelectedItem().toString()) {
            case "Verde":
                cor = Color.GREEN;
                break;
            case "Azul":
                cor = Color.BLUE;
                break;
            case "Amarelo":
                cor = Color.YELLOW;
                break;
        }

        Competidor novoCompetidor = new Competidor(nome, 5, cor);
        competidores.add(novoCompetidor);
        drawPanel.repaint(); // Atualiza o painel para desenhar a nova bolinha
        JOptionPane.showMessageDialog(this, "Competidor " + nome + " adicionado!");
    }

    private class DrawPanel extends JPanel {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (floresta != null) {
                // Desenha a floresta e os competidores
                Elemento[][] grid = floresta.getGrid();
                int tamanho = floresta.getTamanho();
                int cellSize = 40; // Tamanho de cada c√©lula da grade

                // Desenhar a grade da floresta
                for (int i = 0; i < tamanho; i++) {
                    for (int j = 0; j < tamanho; j++) {
                        if (grid[i][j] instanceof ElementoEstatico) {
                            g.drawString(((ElementoEstatico) grid[i][j]).getRepresentacao(), j * cellSize, i * cellSize + 30);
                        } else if (grid[i][j] instanceof Fruta) {
                            g.drawString(((Fruta) grid[i][j]).getRepresentacao(), j * cellSize, i * cellSize + 30);
                        }
                    }
                }

                // Desenha cada competidor como uma bolinha
                for (Competidor competidor : competidores) {
                    g.setColor(competidor.getCor());
                    g.fillOval(competidor.getPosX() * cellSize + 10, competidor.getPosY() * cellSize + 10, 20, 20);
                }
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            pooteste1 frame = new pooteste1();
            frame.setVisible(true);
        });
    }
}
